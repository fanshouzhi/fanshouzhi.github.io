(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{301:function(e,v,_){"use strict";_.r(v);var o=_(10),s=Object(o.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[e._v("#")]),e._v(" 进程")]),e._v(" "),v("p",[e._v("进程 "),v("code",[e._v("Process")]),e._v("是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器（来自百科）。进程是资源分配的最小单位。我们启动一个服务、运行一个实例，就是开一个服务进程，例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 "),v("code",[e._v("node app.js")]),e._v(" 开启一个服务进程，多进程就是进程的复制（fork），fork 出来的每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享。")]),e._v(" "),v("ul",[v("li",[e._v("Node.js开启服务进程例子")])]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const http = require('http');")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("const server = http.createServer();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.listen(3000,()=>{")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.title='程序员成长指北测试进程';")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('进程id',process.pid)")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])])]),e._v(" "),v("p",[e._v("运行上面代码后，以下为 Mac 系统自带的监控工具 “活动监视器” 所展示的效果，可以看到我们刚开启的 Nodejs 进程 7663")]),e._v(" "),v("h2",{attrs:{id:"线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[e._v("#")]),e._v(" 线程")]),e._v(" "),v("p",[e._v("线程是操作系统能够进行运算调度的最小单位，首先我们要清楚线程是隶属于进程的，被包含于进程之中。"),v("strong",[e._v("一个线程只能隶属于一个进程，但是一个进程是可以拥有多个线程的")]),e._v("。")]),e._v(" "),v("h3",{attrs:{id:"单线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[e._v("#")]),e._v(" 单线程")]),e._v(" "),v("p",[v("strong",[e._v("单线程就是一个进程只开一个线程")])]),e._v(" "),v("p",[e._v("Javascript 就是属于单线程，程序顺序执行(这里暂且不提JS异步)，可以想象一下队列，前面一个执行完之后，后面才可以执行，当你在使用单线程语言编码时切勿有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理。你如果采用 Javascript 进行编码时候，请尽可能的利用Javascript异步操作的特性。")]),e._v(" "),v("h4",{attrs:{id:"经典计算耗时造成线程阻塞的例子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#经典计算耗时造成线程阻塞的例子"}},[e._v("#")]),e._v(" 经典计算耗时造成线程阻塞的例子")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const http = require('http');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const longComputation = () => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("let sum = 0;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("for (let i = 0; i < 1e10; i++) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("sum += i;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("};")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("return sum;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("};")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const server = http.createServer();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.on('request', (req, res) => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("if (req.url === '/compute') {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.info('计算开始',new Date());")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const sum = longComputation();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.info('计算结束',new Date());")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("return res.end(`Sum is ${sum}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("} else {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.end('Ok')")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("server.listen(3000);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("//打印结果")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("//计算开始 2019-07-28T07:08:49.849Z")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("//计算结束 2019-07-28T07:09:04.522Z")])])])]),e._v(" "),v("p",[e._v("查看打印结果，当我们调用 "),v("code",[e._v("127.0.0.1:3000/compute")]),e._v("的时候，如果想要调用其他的路由地址比如127.0.0.1/大约需要15秒时间，也可以说一个用户请求完第一个 "),v("code",[e._v("compute")]),e._v("接口后需要等待15秒，这对于用户来说是极其不友好的。下文我会通过创建多进程的方式 "),v("code",[e._v("child_process.fork")]),e._v(" 和 "),v("code",[e._v("cluster")]),e._v(" 来解决解决这个问题。")]),e._v(" "),v("h4",{attrs:{id:"单线程的一些说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单线程的一些说明"}},[e._v("#")]),e._v(" 单线程的一些说明")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Node.js 虽然是单线程模型，但是其基于事件驱动、异步非阻塞模式，可以应用于高并发场景，避免了线程创建、线程之间上下文切换所产生的资源开销。")])]),e._v(" "),v("li",[v("p",[e._v("当你的项目中需要有大量计算，CPU 耗时的操作时候，要注意考虑开启多进程来完成了。")])]),e._v(" "),v("li",[v("p",[e._v("Node.js 开发过程中，错误会引起整个应用退出，应用的健壮性值得考验，尤其是错误的异常抛出，以及进程守护是必须要做的。")])]),e._v(" "),v("li",[v("p",[e._v("单线程无法利用多核CPU，但是后来Node.js 提供的API以及一些第三方工具相应都得到了解决，文章后面都会讲到。")])])]),e._v(" "),v("h2",{attrs:{id:"node-js-中的进程与线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中的进程与线程"}},[e._v("#")]),e._v(" Node.js 中的进程与线程")]),e._v(" "),v("p",[e._v("Node.js 是 Javascript 在服务端的运行环境，构建在 chrome 的 V8 引擎之上，基于事件驱动、非阻塞I/O模型，充分利用操作系统提供的异步 I/O 进行多任务的执行，适合于 I/O 密集型的应用场景，因为异步，程序无需阻塞等待结果返回，而是基于回调通知的机制，原本同步模式等待的时间，则可以用来处理其它任务，")]),e._v(" "),v("blockquote",[v("p",[e._v("科普：在 Web 服务器方面，著名的 Nginx 也是采用此模式（事件驱动），避免了多线程的线程创建、线程上下文切换的开销，Nginx 采用 C 语言进行编写，主要用来做高性能的 Web 服务器，不适合做业务。")])]),e._v(" "),v("p",[e._v("Web业务开发中，如果你有高并发应用场景那么 Node.js 会是你不错的选择。")]),e._v(" "),v("p",[e._v("在单核 CPU 系统之上我们采用 单进程 + 单线程 的模式来开发。在多核 CPU 系统之上，可以通过 "),v("code",[e._v("child_process.fork")]),e._v(" 开启多个进程（Node.js 在 v0.8 版本之后新增了Cluster 来实现多进程架构） ，即 多进程 + 单线程 模式。注意：开启多进程不是为了解决高并发，主要是解决了单进程模式下 Node.js CPU 利用率不足的情况，充分利用多核 CPU 的性能。")]),e._v(" "),v("h3",{attrs:{id:"node-js-中的进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中的进程"}},[e._v("#")]),e._v(" Node.js 中的进程")]),e._v(" "),v("h4",{attrs:{id:"process-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#process-模块"}},[e._v("#")]),e._v(" process 模块")]),e._v(" "),v("p",[e._v("Node.js 中的进程 Process 是一个全局对象，无需 require 直接使用，给我们提供了当前进程中的相关信息。官方文档提供了详细的说明，感兴趣的可以亲自实践下 Process 文档。")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("process.env")]),e._v("：环境变量，例如通过 "),v("code",[e._v("process.env.NODE_ENV")]),e._v(" 获取不同环境项目配置信息")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.nextTick")]),e._v("：这个在谈及 "),v("code",[e._v("EventLoop")]),e._v(" 时经常为会提到")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.pid")]),e._v("：获取当前进程id")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.ppid")]),e._v("：当前进程对应的父进程")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.cwd()")]),e._v("：获取当前进程工作目录，")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.platform")]),e._v("：获取当前进程运行的操作系统平台")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.uptime()")]),e._v("：当前进程已运行时间，例如：pm2 守护进程的 uptime 值")])]),e._v(" "),v("li",[v("p",[e._v("进程事件： "),v("code",[e._v("process.on(‘uncaughtException’,cb)")]),e._v(" 捕获异常信息、 "),v("code",[e._v("process.on(‘exit’,cb）")]),e._v("进程推出监听")])]),e._v(" "),v("li",[v("p",[e._v("三个标准流： "),v("code",[e._v("process.stdout")]),e._v(" 标准输出、 "),v("code",[e._v("process.stdin")]),e._v(" 标准输入、 "),v("code",[e._v("process.stderr")]),e._v(" 标准错误输出")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.title")]),e._v(" 指定进程名称，有的时候需要给进程指定一个名称")])])]),e._v(" "),v("p",[e._v("以上仅列举了部分常用到功能点，除了 Process 之外 Node.js 还提供了 child_process 模块用来对子进程进行操作，在下文 Nodejs进程创建会继续讲述。")]),e._v(" "),v("h4",{attrs:{id:"node-js-进程创建"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-进程创建"}},[e._v("#")]),e._v(" Node.js 进程创建")]),e._v(" "),v("p",[e._v("进程创建有多种方式，本篇文章以child_process模块和cluster模块进行讲解。")]),e._v(" "),v("h5",{attrs:{id:"child-process模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#child-process模块"}},[e._v("#")]),e._v(" child_process模块")]),e._v(" "),v("p",[e._v("child_process 是 Node.js 的内置模块，官网地址：")]),e._v(" "),v("blockquote",[v("p",[e._v("childprocess 官网地址：http://nodejs.cn/api/childprocess.html#childprocesschild_process")])]),e._v(" "),v("p",[e._v("几个常用函数：四种方式")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("child_process.spawn()")]),e._v("：适用于返回大量数据，例如图像处理，二进制数据处理。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("child_process.exec()")]),e._v("：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("child_process.execFile()")]),e._v("：类似 "),v("code",[e._v("child_process.exec()")]),e._v("，区别是不能通过 shell 来执行，不支持像 I/O 重定向和文件查找这样的行为")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("child_process.fork()")]),e._v("：衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统* CPU 核心数*设置。")])])]),e._v(" "),v("blockquote",[v("p",[e._v("CPU 核心数这里特别说明下，fork 确实可以开启多个进程，但是并不建议衍生出来太多的进程，cpu核心数的获取方式 "),v("code",[e._v("constcpus=require('os').cpus();")]),e._v(",这里 cpus 返回一个对象数组，包含所安装的每个 CPU/内核的信息，二者总和的数组哦。假设主机装有两个cpu，每个cpu有4个核，那么总核数就是8。")])]),e._v(" "),v("h6",{attrs:{id:"fork开启子进程-demo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#fork开启子进程-demo"}},[e._v("#")]),e._v(" fork开启子进程 Demo")]),e._v(" "),v("p",[e._v("fork开启子进程解决文章起初的计算耗时造成线程阻塞。在进行 compute 计算时创建子进程，子进程计算完成通过 "),v("code",[e._v("send")]),e._v(" 方法将结果发送给主进程，主进程通过 "),v("code",[e._v("message")]),e._v(" 监听到信息后处理并退出。")]),e._v(" "),v("blockquote",[v("p",[e._v("fork_app.js")])]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const http = require('http');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const fork = require('child_process').fork;")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("const server = http.createServer((req, res) => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("if(req.url == '/compute'){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const compute = fork('./fork_compute.js');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("compute.send('开启一个新的子进程');")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("// 当一个子进程使用 process.send() 发送消息时会触发 'message' 事件")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("compute.on('message', sum => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.end(`Sum is ${sum}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("compute.kill();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("// 子进程监听到一些错误消息退出")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("compute.on('close', (code, signal) => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(`收到close事件，子进程收到信号 ${signal} 而终止，退出码 ${code}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("compute.kill();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}else{")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.end(`ok`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.listen(3000, 127.0.0.1, () => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(`server started at http://${127.0.0.1}:${3000}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])])]),e._v(" "),v("blockquote",[v("p",[e._v("fork_compute.js")])]),e._v(" "),v("p",[e._v("针对文初需要进行计算的的例子我们创建子进程拆分出来单独进行运算。")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const computation = () => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("let sum = 0;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.info('计算开始');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.time('计算耗时');")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("for (let i = 0; i < 1e10; i++) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("sum += i")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("};")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("console.info('计算结束');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.timeEnd('计算耗时');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("return sum;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("};")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("process.on('message', msg => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(msg, 'process.pid', process.pid); // 子进程id")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const sum = computation();")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("// 如果Node.js进程是通过进程间通信产生的，那么，process.send()方法可以用来给父进程发送消息")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.send(sum);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])])]),e._v(" "),v("h5",{attrs:{id:"cluster模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cluster模块"}},[e._v("#")]),e._v(" cluster模块")]),e._v(" "),v("p",[e._v("cluster 开启子进程Demo")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const http = require('http');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const numCPUs = require('os').cpus().length;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const cluster = require('cluster');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("if(cluster.isMaster){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('Master proces id is',process.pid);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("// fork workers")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("for(let i= 0;i<numCPUs;i++){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("cluster.fork();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("cluster.on('exit',function(worker,code,signal){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('worker process died,id',worker.process.pid)")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}else{")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("// Worker可以共享同一个TCP连接")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("// 这里是一个http服务器")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("http.createServer(function(req,res){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.writeHead(200);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.end('hello word');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}).listen(8000);")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])])]),e._v(" "),v("h6",{attrs:{id:"cluster原理分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cluster原理分析"}},[e._v("#")]),e._v(" cluster原理分析")]),e._v(" "),v("p",[e._v("cluster模块调用fork方法来创建子进程，该方法与child_process中的fork是同一个方法。cluster模块采用的是经典的主从模型，Cluster会创建一个master，然后根据你指定的数量复制出多个子进程，可以使用 "),v("code",[e._v("cluster.isMaster")]),e._v("属性判断当前进程是master还是worker(工作进程)。由master进程来管理所有的子进程，主进程不负责具体的任务处理，主要工作是负责调度和管理。")]),e._v(" "),v("p",[e._v("cluster模块使用内置的负载均衡来更好地处理线程之间的压力，该负载均衡使用了 "),v("code",[e._v("Round-robin")]),e._v("算法（也被称之为循环算法）。当使用Round-robin调度策略时，master accepts()所有传入的连接请求，然后将相应的TCP请求处理发送给选中的工作进程（该方式仍然通过IPC来进行通信）。")]),e._v(" "),v("p",[e._v("开启多进程时候端口疑问讲解：如果多个Node进程监听同一个端口时会出现 "),v("code",[e._v("Error:listen EADDRIUNS")]),e._v("的错误，而cluster模块为什么可以让多个子进程监听同一个端口呢?原因是master进程内部启动了一个TCP服务器，而真正监听端口的只有这个服务器，当来自前端的请求触发服务器的connection事件后，master会将对应的socket具柄发送给子进程。")]),e._v(" "),v("h5",{attrs:{id:"child-process-模块与cluster-模块总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#child-process-模块与cluster-模块总结"}},[e._v("#")]),e._v(" child_process 模块与cluster 模块总结")]),e._v(" "),v("p",[e._v("无论是 child_process 模块还是 cluster 模块，为了解决 Node.js 实例单线程运行，无法利用多核 CPU 的问题而出现的。核心就是"),v("strong",[e._v("父进程（即 master 进程）负责监听端口，接收到新的请求后将其分发给下面的 worker 进程")]),e._v("。")]),e._v(" "),v("p",[e._v("cluster模块的一个弊端：")]),e._v(" "),v("p",[e._v("cluster内部隐时的构建TCP服务器的方式来说对使用者确实简单和透明了很多，但是这种方式无法像使用childprocess那样灵活，因为一直主进程只能管理一组相同的工作进程，而自行通过childprocess来创建工作进程，一个主进程可以控制多组进程。原因是child_process操作子进程时，可以隐式的创建多个TCP服务器，对比上面的两幅图应该能理解我说的内容。")]),e._v(" "),v("h4",{attrs:{id:"node-js进程通信原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js进程通信原理"}},[e._v("#")]),e._v(" Node.js进程通信原理")]),e._v(" "),v("p",[e._v("前面讲解的无论是child_process模块，还是cluster模块，都需要主进程和工作进程之间的通信。通过fork()或者其他API，创建了子进程之后，为了实现父子进程之间的通信，父子进程之间才能通过message和send()传递信息。")]),e._v(" "),v("p",[e._v("IPC这个词我想大家并不陌生，不管那一张开发语言只要提到进程通信，都会提到它。IPC的全称是Inter-Process Communication,即进程间通信。它的目的是为了让不同的进程能够互相访问资源并进行协调工作。实现进程间通信的技术有很多，如命名管道，匿名管道，socket，信号量，共享内存，消息队列等。Node中实现IPC通道是依赖于libuv。windows下由命名管道(name pipe)实现，*nix系统则采用Unix Domain Socket实现。表现在应用层上的进程间通信只有简单的message事件和send()方法，接口十分简洁和消息化。")]),e._v(" "),v("p",[e._v("IPC创建和实现示意图")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0NwvFE23snu7UtMNscmrZrKV1vGCaGDvWc3kpZZHgGQgmM7sjaxfde3yVibCtvpUXNQNn4BALr8UsLGw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:""}})]),e._v(" "),v("p",[e._v("IPC通信管道是如何创建的")]),e._v(" "),v("p",[e._v("父进程在实际创建子进程之前，会创建 "),v("code",[e._v("IPC通道")]),e._v("并监听它，然后才 "),v("code",[e._v("真正的")]),e._v("创建出 "),v("code",[e._v("子进程")]),e._v("，这个过程中也会通过环境变量（NODECHANNELFD）告诉子进程这个IPC通道的文件描述符。子进程在启动的过程中，根据文件描述符去连接这个已存在的IPC通道，从而完成父子进程之间的连接。")]),e._v(" "),v("h4",{attrs:{id:"node-js句柄传递"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js句柄传递"}},[e._v("#")]),e._v(" Node.js句柄传递")]),e._v(" "),v("p",[e._v("讲句柄之前，先想一个问题，send句柄发送的时候，真的是将服务器对象发送给了子进程？")]),e._v(" "),v("h5",{attrs:{id:"子进程对象send-方法可以发送的句柄类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#子进程对象send-方法可以发送的句柄类型"}},[e._v("#")]),e._v(" 子进程对象send()方法可以发送的句柄类型")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("net.Socket TCP套接字")])]),e._v(" "),v("li",[v("p",[e._v("net.Server TCP服务器，任意建立在TCP服务上的应用层服务都可以享受它带来的好处")])]),e._v(" "),v("li",[v("p",[e._v("net.Native C++层面的TCP套接字或IPC管道")])]),e._v(" "),v("li",[v("p",[e._v("dgram.Socket UDP套接字")])]),e._v(" "),v("li",[v("p",[e._v("dgram.Native C++层面的UDP套接字")])])]),e._v(" "),v("h5",{attrs:{id:"send句柄发送原理分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#send句柄发送原理分析"}},[e._v("#")]),e._v(" send句柄发送原理分析")]),e._v(" "),v("p",[e._v("结合句柄的发送与还原示意图更容易理解。")]),e._v(" "),v("p",[e._v("send()`方法在将消息发送到IPC管道前，实际将消息组装成了两个对象，一个参数是hadler，另一个是message。message参数如下所示：")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("{")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("cmd:'NODE_HANDLE',")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("type:'net.Server',")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("msg:message")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])])]),e._v(" "),v("p",[e._v("发送到IPC管道中的实际上是我们要发送的句柄文件描述符。这个message对象在写入到IPC管道时，也会通过 "),v("code",[e._v("JSON.stringfy()")]),e._v("进行序列化。所以最终发送到IPC通道中的信息都是字符串，send()方法能发送消息和句柄并不意味着它能发送任何对象。")]),e._v(" "),v("p",[e._v("连接了IPC通道的子线程可以读取父进程发来的消息，将字符串通过JSON.parse()解析还原为对象后，才触发message事件将消息传递给应用层使用。在这个过程中，消息对象还要被进行过滤处理，message.cmd的值如果以NODE为前缀，它将响应一个内部事件internalMessage，如果message.cmd值为NODEHANDLE,它将取出 "),v("code",[e._v("message.type")]),e._v("值和得到的文件描述符一起还原出一个对应的对象。")]),e._v(" "),v("p",[e._v("以发送的TCP服务器句柄为例，子进程收到消息后的还原过程代码如下:")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("function(message,handle,emit){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("var self = this;")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("var server = new net.Server();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.listen(handler,function(){")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("emit(server);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])])]),e._v(" "),v("p",[e._v("这段还原代码， "),v("code",[e._v("子进程根据message.type创建对应的TCP服务器对象，然后监听到文件描述符上")]),e._v("。由于底层细节不被应用层感知，所以子进程中，开发者会有一种服务器对象就是从父进程中直接传递过来的错觉。")]),e._v(" "),v("blockquote",[v("p",[e._v("Node进程之间只有消息传递，不会真正的传递对象，这种错觉是抽象封装的结果。目前Node只支持我前面提到的几种句柄，并非任意类型的句柄都能在进程之间传递，除非它有完整的发送和还原的过程。")])]),e._v(" "),v("h4",{attrs:{id:"node-js多进程架构模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js多进程架构模型"}},[e._v("#")]),e._v(" Node.js多进程架构模型")]),e._v(" "),v("p",[e._v("我们自己实现一个多进程架构守护Demo")]),e._v(" "),v("p",[e._v("编写主进程")]),e._v(" "),v("p",[e._v("master.js 主要处理以下逻辑：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("创建一个 server 并监听 3000 端口。")])]),e._v(" "),v("li",[v("p",[e._v("根据系统 cpus 开启多个子进程")])]),e._v(" "),v("li",[v("p",[e._v("通过子进程对象的 send 方法发送消息到子进程进行通信")])]),e._v(" "),v("li",[v("p",[e._v("在主进程中监听了子进程的变化，如果是自杀信号重新启动一个工作进程。")])]),e._v(" "),v("li",[v("p",[e._v("主进程在监听到退出消息的时候，先退出子进程在退出主进程")])])]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("// master.js")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const fork = require('child_process').fork;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const cpus = require('os').cpus();")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("const server = require('net').createServer();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.listen(3000);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.title = 'node-master'")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("const workers = {};")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const createWorker = () => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const worker = fork('worker.js')")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.on('message', function (message) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("if (message.act === 'suicide') {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("createWorker();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.on('exit', function(code, signal) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('worker process exited, code: %s signal: %s', code, signal);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("delete workers[worker.pid];")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.send('server', server);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("workers[worker.pid] = worker;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('worker process created, pid: %s ppid: %s', worker.pid, process.pid);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("for (let i=0; i<cpus.length; i++) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("createWorker();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("process.once('SIGINT', close.bind(this, 'SIGINT')); // kill(2) Ctrl-C")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.once('SIGQUIT', close.bind(this, 'SIGQUIT')); // kill(3) Ctrl-\\")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.once('SIGTERM', close.bind(this, 'SIGTERM')); // kill(15) default")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.once('exit', close.bind(this));")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("function close (code) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('进程退出！', code);")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("if (code !== 0) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("for (let pid in workers) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('master process exited, kill worker pid: ', pid);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("workers[pid].kill('SIGINT');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("process.exit(0);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])])]),e._v(" "),v("p",[e._v("工作进程")]),e._v(" "),v("p",[e._v("worker.js 子进程处理逻辑如下：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("创建一个 server 对象，注意这里最开始并没有监听 3000 端口")])]),e._v(" "),v("li",[v("p",[e._v("通过 message 事件接收主进程 send 方法发送的消息")])]),e._v(" "),v("li",[v("p",[e._v("监听 uncaughtException 事件，捕获未处理的异常，发送自杀信息由主进程重建进程，子进程在链接关闭之后退出")])])]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("// worker.js")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const http = require('http');")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const server = http.createServer((req, res) => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.writeHead(200, {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("'Content-Type': 'text/plan'")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("res.end('I am worker, pid: ' + process.pid + ', ppid: ' + process.ppid);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("throw new Error('worker process exception!'); // 测试异常进程退出、重启")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("let worker;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.title = 'node-worker'")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.on('message', function (message, sendHandle) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("if (message === 'server') {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker = sendHandle;")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.on('connection', function(socket) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.emit('connection', socket);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("process.on('uncaughtException', function (err) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(err);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.send({act: 'suicide'});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.close(function () {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.exit(1);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])])]),e._v(" "),v("h4",{attrs:{id:"node-js-进程守护"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-进程守护"}},[e._v("#")]),e._v(" Node.js 进程守护")]),e._v(" "),v("h5",{attrs:{id:"什么是进程守护"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程守护"}},[e._v("#")]),e._v(" 什么是进程守护？")]),e._v(" "),v("p",[e._v("每次启动 Node.js 程序都需要在命令窗口输入命令 "),v("code",[e._v("node app.js")]),e._v(" 才能启动，但如果把命令窗口关闭则Node.js 程序服务就会立刻断掉。除此之外，当我们这个 Node.js 服务意外崩溃了就不能自动重启进程了。这些现象都不是我们想要看到的，所以需要通过某些方式来守护这个开启的进程，执行 node app.js 开启一个服务进程之后，我还可以在这个终端上做些别的事情，且不会相互影响。，当出现问题可以自动重启。")]),e._v(" "),v("h5",{attrs:{id:"如何实现进程守护"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何实现进程守护"}},[e._v("#")]),e._v(" 如何实现进程守护")]),e._v(" "),v("p",[e._v("这里我只说一些第三方的进程守护框架，pm2 和 forever ，它们都可以实现进程守护，底层也都是通过上面讲的 child_process 模块和 cluster 模块 实现的，这里就不再提它们的原理。")]),e._v(" "),v("p",[e._v("pm2 指定生产环境启动一个名为 test 的 node 服务")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("pm2 start app.js --env production --name test")])])]),e._v(" "),v("p",[v("strong",[e._v("pm2常用api")])]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("pm2 stopName/processID")]),e._v(" 停止某个服务，通过服务名称或者服务进程ID")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2deleteName/processID")]),e._v(" 删除某个服务，通过服务名称或者服务进程ID")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2 logs[Name]")]),e._v(" 查看日志，如果添加服务名称，则指定查看某个服务的日志，不加则查看所有日志")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2 start app.js-i4")]),e._v(" 集群，-i参数用来告诉PM2以clustermode的形式运行你的app（对应的叫forkmode），后面的数字表示要启动的工作线程的数量。如果给定的数字为0，PM2则会根据你CPU核心的数量来生成对应的工作线程。注意一般在生产环境使用cluster_mode模式，测试或者本地环境一般使用fork模式，方便测试到错误。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2 reloadNamepm2 restartName")]),e._v(" 应用程序代码有更新，可以用重载来加载新代码，也可以用重启来完成,reload可以做到0秒宕机加载新的代码，restart则是重新启动，生产环境中多用reload来完成代码更新！")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2 showName")]),e._v(" 查看服务详情")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2 list")]),e._v(" 查看pm2中所有项目")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pm2 monit")]),e._v("用monit可以打开实时监视器去查看资源占用情况")])])]),e._v(" "),v("p",[v("strong",[e._v("pm2 官网地址：")])]),e._v(" "),v("blockquote",[v("p",[e._v("http://pm2.keymetrics.io/docs/usage/quick-start/")])]),e._v(" "),v("p",[e._v("forever 就不特殊说明了，官网地址")]),e._v(" "),v("blockquote",[v("p",[e._v("https://github.com/foreverjs/forever")]),e._v(" "),v("p",[e._v("注意：二者更推荐pm2，看一下二者对比就知道我为什么更推荐使用pm2了。https://www.jianshu.com/p/fdc12d82b661")])]),e._v(" "),v("h4",{attrs:{id:"linux-关闭一个进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#linux-关闭一个进程"}},[e._v("#")]),e._v(" linux 关闭一个进程")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("查找与进程相关的PID号")]),e._v(" "),v("p",[e._v("ps aux | grep server"),v("br"),e._v("\n说明:")])])]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("root 20158 0.0 5.0 1251592 95396 ? Sl 5月17 1:19 node /srv/mini-program-api/launch_pm2.js")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("上面是执行命令后在linux中显示的结果，第二个参数就是进程对应的PID")])])])]),e._v(" "),v("ul",[v("li",[e._v("杀死进程")])]),e._v(" "),v("ol",[v("li",[v("p",[e._v("以优雅的方式结束进程")]),e._v(" "),v("p",[e._v("kill -l PID")]),e._v(" "),v("p",[e._v("-l选项告诉kill命令用好像启动进程的用户已注销的方式结束进程。当使用该选项时，kill命令也试图杀死所留下的子进程。但这个命令也不是总能成功--或许仍然需要先手工杀死子进程，然后再杀死父进程。")])]),e._v(" "),v("li",[v("p",[e._v("kill 命令用于终止进程")]),e._v(" "),v("p",[e._v("例如："),v("code",[e._v("kill-9[PID]")]),e._v("-9 表示强迫进程立即停止")]),e._v(" "),v("p",[e._v("这个强大和危险的命令迫使进程在运行时突然终止，进程在结束后不能自我清理。危害是导致系统资源无法正常释放，一般不推荐使用，除非其他办法都无效。当使用此命令时，一定要通过ps -ef确认没有剩下任何僵尸进程。只能通过终止父进程来消除僵尸进程。如果僵尸进程被init收养，问题就比较严重了。杀死init进程意味着关闭系统。如果系统中有僵尸进程，并且其父进程是init，\n而且僵尸进程占用了大量的系统资源，那么就需要在某个时候重启机器以清除进程表了。")])]),e._v(" "),v("li",[v("p",[e._v("killall命令")]),e._v(" "),v("p",[e._v("杀死同一进程组内的所有进程。其允许指定要终止的进程的名称，而非PID。")]),e._v(" "),v("p",[v("code",[e._v("killall httpd")])])])]),e._v(" "),v("h3",{attrs:{id:"node-js-线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-线程"}},[e._v("#")]),e._v(" Node.js 线程")]),e._v(" "),v("h4",{attrs:{id:"node-js关于单线程的误区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js关于单线程的误区"}},[e._v("#")]),e._v(" Node.js关于单线程的误区")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const http = require('http');")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("const server = http.createServer();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("server.listen(3000,()=>{")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("process.title='程序员成长指北测试进程';")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log('进程id',process.pid)")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("})")])])])]),e._v(" "),v("p",[e._v("仍然看本文第一段代码，创建了http服务，开启了一个进程，都说了Node.js是单线程，所以 Node 启动后线程数应该为 1，但是为什么会开启7个线程呢？难道Javascript不是单线程不知道小伙伴们有没有这个疑问？")]),e._v(" "),v("p",[e._v("解释一下这个原因：")]),e._v(" "),v("p",[e._v("Node 中最核心的是 v8 引擎，在 Node 启动后，会创建 v8 的实例，这个实例是多线程的。")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("主线程：编译、执行代码。")])]),e._v(" "),v("li",[v("p",[e._v("编译/优化线程：在主线程执行的时候，可以优化代码。")])]),e._v(" "),v("li",[v("p",[e._v("分析器线程：记录分析代码运行时间，为 Crankshaft 优化代码执行提供依据。")])]),e._v(" "),v("li",[v("p",[e._v("垃圾回收的几个线程。")])])]),e._v(" "),v("p",[e._v("所以大家常说的 Node 是单线程的指的是 JavaScript 的执行是单线程的(开发者编写的代码运行在单线程环境中)，但 Javascript 的宿主环境，无论是 Node 还是浏览器都是多线程的因为libuv中有线程池的概念存在的，libuv会通过类似线程池的实现来模拟不同操作系统的异步调用，这对开发者来说是不可见的。")]),e._v(" "),v("h4",{attrs:{id:"某些异步-io-会占用额外的线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#某些异步-io-会占用额外的线程"}},[e._v("#")]),e._v(" 某些异步 IO 会占用额外的线程")]),e._v(" "),v("p",[e._v("还是上面那个例子，我们在定时器执行的同时，去读一个文件：")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const fs = require('fs')")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("setInterval(() => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(new Date().getTime())")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}, 3000)")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("fs.readFile('./index.html', () => {})")])])])]),e._v(" "),v("p",[e._v("线程数量变成了 11 个，这是因为在 Node 中有一些 IO 操作（DNS，FS）和一些 CPU 密集计算（Zlib，Crypto）会启用 Node 的线程池，而线程池默认大小为 4，因为线程数变成了 11。我们可以手动更改线程池默认大小：")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("process.env.UV_THREADPOOL_SIZE = 64")])])]),e._v(" "),v("p",[e._v("一行代码轻松把线程变成 71。")]),e._v(" "),v("h5",{attrs:{id:"libuv"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#libuv"}},[e._v("#")]),e._v(" Libuv")]),e._v(" "),v("p",[e._v("Libuv 是一个跨平台的异步IO库，它结合了UNIX下的libev和Windows下的IOCP的特性，最早由Node的作者开发，专门为Node提供多平台下的异步IO支持。Libuv本身是由C++语言实现的，Node中的非苏塞IO以及事件循环的底层机制都是由libuv实现的。")]),e._v(" "),v("p",[e._v("libuv架构图")]),e._v(" "),v("p",[e._v("在Window环境下，libuv直接使用Windows的IOCP来实现异步IO。在非Windows环境下，libuv使用多线程来模拟异步IO。")]),e._v(" "),v("p",[e._v("注意下面我要说的话，Node的异步调用是由libuv来支持的，以上面的读取文件的例子，读文件实质的系统调用是由libuv来完成的，Node只是负责调用libuv的接口，等数据返回后再执行对应的回调方法。")]),e._v(" "),v("h4",{attrs:{id:"node-js-线程创建"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-线程创建"}},[e._v("#")]),e._v(" Node.js 线程创建")]),e._v(" "),v("p",[e._v("直到 Node 10.5.0 的发布，官方才给出了一个实验性质的模块 worker_threads 给 Node 提供真正的多线程能力。")]),e._v(" "),v("p",[e._v("先看下简单的 demo：")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("const {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("isMainThread,")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("parentPort,")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("workerData,")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("threadId,")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("MessageChannel,")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("MessagePort,")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("Worker")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("} = require('worker_threads');")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("function mainThread() {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("for (let i = 0; i < 5; i++) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("const worker = new Worker(__filename, { workerData: i });")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.on('exit', code => { console.log(`main: worker stopped with exit code ${code}`); });")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.on('message', msg => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(`main: receive ${msg}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("worker.postMessage(msg + 1);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("});")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("function workerThread() {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(`worker: workerDate ${workerData}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("parentPort.on('message', msg => {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("console.log(`worker: receive ${msg}`);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}),")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("parentPort.postMessage(workerData);")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])]),e._v(" "),v("li"),e._v(" "),v("li",[v("p",[v("code",[e._v("if (isMainThread) {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("mainThread();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("} else {")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("workerThread();")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("}")])])])]),e._v(" "),v("p",[e._v("上述代码在主线程中开启五个子线程，并且主线程向子线程发送简单的消息。")]),e._v(" "),v("p",[e._v("由于 worker_thread 目前仍然处于实验阶段，所以启动时需要增加 --experimental-worker flag，运行后观察活动监视器，开启了5个子线程")]),e._v(" "),v("h5",{attrs:{id:"worker-thread-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#worker-thread-模块"}},[e._v("#")]),e._v(" worker_thread 模块")]),e._v(" "),v("p",[e._v("workerthread 核心代码（地址https://github.com/nodejs/node/blob/master/lib/workerthreads.js）\nworker_thread 模块中有 4 个对象和 2 个类，可以自己去看上面的源码。")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("isMainThread: 是否是主线程，源码中是通过 threadId === 0 进行判断的。")])]),e._v(" "),v("li",[v("p",[e._v("MessagePort: 用于线程之间的通信，继承自 EventEmitter。")])]),e._v(" "),v("li",[v("p",[e._v("MessageChannel: 用于创建异步、双向通信的通道实例。")])]),e._v(" "),v("li",[v("p",[e._v("threadId: 线程 ID。")])]),e._v(" "),v("li",[v("p",[e._v("Worker: 用于在主线程中创建子线程。第一个参数为 filename，表示子线程执行的入口。")])]),e._v(" "),v("li",[v("p",[e._v("parentPort: 在 worker 线程里是表示父进程的 MessagePort 类型的对象，在主线程里为 null")])]),e._v(" "),v("li",[v("p",[e._v("workerData: 用于在主进程中向子进程传递数据（data 副本）")])])]),e._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("p",[v("strong",[e._v("多进程 vs 多线程")])]),e._v(" "),v("p",[e._v("对比一下多线程与多进程：")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("属性")]),e._v(" "),v("th",[e._v("多进程")]),e._v(" "),v("th",[e._v("多线程")]),e._v(" "),v("th",[e._v("比较")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("数据")]),e._v(" "),v("td",[e._v("数据共享复杂，需要用IPC；数据是分开的，同步简单")]),e._v(" "),v("td",[e._v("因为共享进程数据，数据共享简单，同步复杂")]),e._v(" "),v("td",[e._v("各有千秋")])]),e._v(" "),v("tr",[v("td",[e._v("CPU、内存")]),e._v(" "),v("td",[e._v("占用内存多，切换复杂，CPU利用率低")]),e._v(" "),v("td",[e._v("占用内存少，切换简单，CPU利用率高")]),e._v(" "),v("td",[e._v("多线程更好")])]),e._v(" "),v("tr",[v("td",[e._v("销毁、切换")]),e._v(" "),v("td",[e._v("创建销毁、切换复杂，速度慢")]),e._v(" "),v("td",[e._v("创建销毁、切换简单，速度很快")]),e._v(" "),v("td",[e._v("多线程更好")])]),e._v(" "),v("tr",[v("td",[e._v("coding")]),e._v(" "),v("td",[e._v("编码简单、调试方便")]),e._v(" "),v("td",[e._v("编码、调试复杂")]),e._v(" "),v("td",[e._v("编码、调试复杂")])]),e._v(" "),v("tr",[v("td",[e._v("可靠性")]),e._v(" "),v("td",[e._v("进程独立运行，不会相互影响")]),e._v(" "),v("td",[e._v("线程同呼吸共命运")]),e._v(" "),v("td",[e._v("多进程更好")])]),e._v(" "),v("tr",[v("td",[e._v("分布式")]),e._v(" "),v("td",[e._v("可用于多机多核分布式，易于扩展")]),e._v(" "),v("td",[e._v("只能用于多核分布式")]),e._v(" "),v("td",[e._v("多进程更好")])])])])])}),[],!1,null,null,null);v.default=s.exports}}]);