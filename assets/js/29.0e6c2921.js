(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{313:function(t,a,e){"use strict";e.r(a);var s=e(10),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"高频使用的指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高频使用的指令"}},[t._v("#")]),t._v(" 高频使用的指令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. 注册内网 gitLab 账户\n2. 项目管理员拉我进项目\n3. 有了权限后，git clone 'url' 项目到本地\n4. 自己创建新的项目分支 git branch '分支名'\n5. 开始编码吧...\n6. git clone 默认是下载了所有分支的代码\n7. git branch -r 查看项目所有分支\n8. git branch -a 查看项目所有远程分支\n9. git checkout '分支名' 切换分支\n10. git branch 打印出来所有的分支，以及当前所在分支\n11. git log 查看提交记录，退出 英文状态下 Q\n12. git reflog 可查看修改记录（包括git reset 的回退记录）\n13. git reset --hard {commit id} 回退版本\n14. git stash //代码放进暂存区(未被commit的代码)\n15. git stash apply 还原\n16. git stash drop 清除最近一次的stash记录\n17. git stash pop 还原并清除最近一次 stash\n18. git stash list 查看暂存列表\n19. git stash clear 清空所有 stash 的记录\n20. git remote -v 显示所有远程仓库\n21. git remote add url 添加一个远程仓库\n22. git remote rm name # 删除远程仓库\n23. git remote rename old_name new_name # 修改仓库名\n")])])]),a("h2",{attrs:{id:"git-文件名大小写问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-文件名大小写问题"}},[t._v("#")]),t._v(" git 文件名大小写问题")]),t._v(" "),a("p",[t._v("踩了git的坑！！")]),t._v(" "),a("p",[t._v("在 windows下，一开始提交了一个 login.less文件，后来把它重命名为 Login.less，居然提交不了，git 提示没有改动，后来才知道，原来git默认对文件名的大小写不敏感。")]),t._v(" "),a("p",[t._v("如何解决git文件名大小写问题？")]),t._v(" "),a("h3",{attrs:{id:"方案1-配置git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方案1-配置git"}},[t._v("#")]),t._v(" 方案1，配置git")]),t._v(" "),a("p",[t._v("首先可以通过配置git来达到识别文件名大小写的问题。命令如下：")]),t._v(" "),a("p",[t._v("git config core.ignorecase false")]),t._v(" "),a("p",[t._v("缺点是每个仓库都需要修改。")]),t._v(" "),a("h3",{attrs:{id:"方案2-手动修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方案2-手动修改"}},[t._v("#")]),t._v(" 方案2，手动修改")]),t._v(" "),a("ol",[a("li",[t._v("首先删除存储在git本地仓库的目标文件，以 Login.less 为例：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm Login.less 或者\ngit rm -f Login.less -f 表示强制删除。\n")])])]),a("ol",[a("li",[t._v("修改文件名")]),t._v(" "),a("li",[t._v("添加文件到本地仓库 git add .")]),t._v(" "),a("li",[t._v("提交到本地仓库及远程仓库")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git commit -m 'rename file'; \ngit push\n")])])]),a("h3",{attrs:{id:"git-merge-冲突后恢复到合并前状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-冲突后恢复到合并前状态"}},[t._v("#")]),t._v(" git merge 冲突后恢复到合并前状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git merge --abort // 回滚到合并之前\n\n第二种方案：\n\ngit stash\ngit stash clear\n")])])]),a("h3",{attrs:{id:"修改-git-仓库的提交用户名和邮箱地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-git-仓库的提交用户名和邮箱地址"}},[t._v("#")]),t._v(" 修改 git 仓库的提交用户名和邮箱地址")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 查看\ngit config user.name\ngit config user.email\n\n// 全局仓库\ngit config --global user.name "yourName"\ngit config --glocal uer.email "yourEmail"\n\n// 单个仓库\ngit config user.name "yourName"\ngit config user.email "yourEmail"\n')])])]),a("h2",{attrs:{id:"取消-git-对某文件的跟踪-示-development-env-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消-git-对某文件的跟踪-示-development-env-js"}},[t._v("#")]),t._v(" 取消 Git 对某文件的跟踪 （示： development.env.js）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git update-index --assume-unchanged config/development.env.js  可以忽略文件\n\ngit checkout .\\config\\development.env.js\n\ngit update-index --no-assume-unchanged .\\config\\development.env.js 可以取消忽略文件 \n")])])]),a("h2",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("p",[t._v("解决方法")]),t._v(" "),a("p",[t._v("1、运行git reflog 命令查看你的历史变更记录，如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fdb70fe HEAD@{0}: pull origin newpbft: Fast-forward\n40a9a83 HEAD@{1}: checkout: moving from guan to master\nb3fa4c3 HEAD@{2}: commit: copy from newpbft, first init\n71bf0ec HEAD@{3}: checkout: moving from newpbft to guan\n71bf0ec HEAD@{4}: commit: 1. add moveStore() to clean up certStore and blockStore.\n1006d67 HEAD@{5}: commit: 1. Add PBFT branch to Puppeth.\nfa3fb56 HEAD@{6}: commit: 1. change some errors about packages and vars\n5f40fdc HEAD@{7}: checkout: moving from master to newpbft\n40a9a83 HEAD@{8}: clone: from https://github.com/yeongchingtarn/geth-pbft.git\n")])])]),a("p",[t._v("2、然后用 git reset --hard HEAD@{n}，（n是你要回退到的引用位置）回退；比如上图可运行 git reset --hard 40a9a83")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset 与 git revert 的区别？\n\ngit reset --hard {commitHashId} // 回退到某一个版本\ngit revert -n {commitHashId} // 回退某一个 commit, 会生成一个新的版本，反转覆盖掉原来的提交代码\n")])])]),a("p",[a("strong",[t._v("注意：关于版本回退记录！！")])]),t._v(" "),a("p",[t._v("一个commit对应这一个版本，有一个commit id，40位的16进制数字，通过SHA1计算得到，不同的文件计算出来的SHA1值不同(有很小的几率相同，可忽略)，这样每一个提交都有其独特的id。每提交一个新版本，实际上 Git 就会把它们自动串成一条时间线。")]),t._v(" "),a("p",[t._v("在Git中，HEAD 表示当前版本，也就是e620a6ff0940a8dff…，HEAD^ 表示上一个版本，HEAD^^ 表示上上一个版本，往上100个版本可以写成HEAD加连续100个 ^ ，也可以写成：HEAD~100")]),t._v(" "),a("h2",{attrs:{id:"拉取远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取远程分支"}},[t._v("#")]),t._v(" 拉取远程分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 拉取远程分支并建立本地分支，但不会自动切换到此本地分支\ngit fetch origin 远程分支名x:本地分支名x\n\ngit checkout -b 本地分支名 origin/远程分支名\n")])])]),a("h2",{attrs:{id:"分支合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支合并"}},[t._v("#")]),t._v(" 分支合并")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git merge a 将 a 分支合并到当前分支\n\n注意事项： \n合并分支需要先更新本地分支代码，然后将本地分支1合并到本地分支2，不能直接合并远程分支1到本地分支2\n")])])]),a("h2",{attrs:{id:"暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂存区"}},[t._v("#")]),t._v(" 暂存区")]),t._v(" "),a("p",[t._v("当你需要紧急切换到主分支，执行紧急任务的时候，可以使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash // 当前分支代码加入暂存区\ngit stash list // 查看暂存记录id\ngit stash apply // 还原\ngit stash drop 删除最后一条暂存区信息\n")])])]),a("h2",{attrs:{id:"修改分支名-重命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改分支名-重命名"}},[t._v("#")]),t._v(" 修改分支名(重命名)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch -m oldName newName\n")])])]),a("h2",{attrs:{id:"删除本地分支和远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除本地分支和远程分支"}},[t._v("#")]),t._v(" 删除本地分支和远程分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. git branch -d '分支名'\n2. git branch -D '分支名' //强制删除\n3. git push origin --delete '分支名' // 删除远程分支\n")])])]),a("h2",{attrs:{id:"新建本地分支及远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建本地分支及远程分支"}},[t._v("#")]),t._v(" 新建本地分支及远程分支")]),t._v(" "),a("ol",[a("li",[t._v("git branch '分支名' //本地新建分支")]),t._v(" "),a("li",[t._v("git fetch origin b1:b2 // 从远程拉取分支 b1 的代码到 本地并新建b2分支")])]),t._v(" "),a("h2",{attrs:{id:"查看和修改本地分支和远程分支-关联情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看和修改本地分支和远程分支-关联情况"}},[t._v("#")]),t._v(" 查看和修改本地分支和远程分支 关联情况")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote -v // 查看git对应的远程仓库地址\ngit remote rm origin // 删除关联对应的远程仓库地址\ngit remote -v // 查看是否删除成功，如果没有任何返回结果，表示OK\ngit remote add origin https://github.com/developers-youcong/Metronic_Template.git // 重新关联git远程仓库地址\n")])])]),a("h2",{attrs:{id:"git-cherry-pick-摘樱桃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-摘樱桃"}},[t._v("#")]),t._v(" git cherry-pick （摘樱桃）")]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ol",[a("li",[t._v("代码 commit 到错误的分支")]),t._v(" "),a("li",[t._v("转移另一个代码库的提交A")])]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰的讲解"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("在当前分支重新复制提交一份改commit 的代码，生成新的 commitHash\n\n-x 配置项\n在提交信息的末尾追加一行(cherry picked from commit ...)，方便以后查到这个提交是如何产生的。\n\ngit cherry-pick {commitHashId}\n")])])]),a("h2",{attrs:{id:"git-rebase-和-git-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-和-git-merge"}},[t._v("#")]),t._v(" git rebase 和 git merge")]),t._v(" "),a("p",[t._v("rebase 翻译为变基，他的作用和 merge 很相似，用于把一个分支的修改合并到当前分支上, 不同于 git rebase的是，git merge 在不是 fast-forward（快速合并）的情况下，会产生一条额外的合并记录，类似Merge branch 'xxx' into 'xxx'的一条提交信息。")]),t._v(" "),a("h2",{attrs:{id:"取消本地文件修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消本地文件修改"}},[t._v("#")]),t._v(" 取消本地文件修改")]),t._v(" "),a("h4",{attrs:{id:"_1-未使用-git-add-缓存代码时。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-未使用-git-add-缓存代码时。"}},[t._v("#")]),t._v(" 1. 未使用 git add 缓存代码时。")]),t._v(" "),a("p",[t._v("可以使用 git checkout -- filepathname (比如： git checkout -- readme.md ，不要忘记中间的 “--” ，不写就成了检出分支了！！)。")]),t._v(" "),a("p",[t._v("放弃所有的文件修改可以使用 git checkout . 命令。")]),t._v(" "),a("p",[t._v("此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件；因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。")]),t._v(" "),a("h4",{attrs:{id:"_2-已经使用了-git-add-缓存了代码。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-已经使用了-git-add-缓存了代码。"}},[t._v("#")]),t._v(" 2. 已经使用了 git add 缓存了代码。")]),t._v(" "),a("p",[t._v("可以使用 git reset HEAD filepathname （比如： git reset HEAD readme.md）来放弃指定文件的缓存，放弃所以的缓存可以使用 git reset HEAD . 命令。")]),t._v(" "),a("p",[t._v("此命令用来清除 git 对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了如（一）所示的状态。继续用（一）中的操作，就可以放弃本地的修改。")]),t._v(" "),a("h4",{attrs:{id:"_3-已经用-git-commit-提交了代码。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-已经用-git-commit-提交了代码。"}},[t._v("#")]),t._v(" 3. 已经用 git commit 提交了代码。")]),t._v(" "),a("p",[t._v("可以使用 git reset --hard HEAD^ 来回退到上一次commit的状态。此命令可以用来回退到任意版本：git reset --hard commitid")]),t._v(" "),a("p",[t._v("你可以使用 git log 命令来查看git的提交历史。git log 的输出如下,之一这里可以看到第一行就是 commitid：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("commit cf0d692e982d8e372a07aaa6901c395eec73e356 (HEAD -> master)\nAuthor: toyflivver <2440659688@qq.com>\nDate:   Thu Sep 28 14:07:14 2017 +0800\n    多余的空行\ncommit 14aa4d7ad4ac6fba59b4b8261d32e478e8cc99ff\nAuthor: toyflivver <2440659688@qq.com>\nDate:   Thu Sep 28 14:06:44 2017 +0800\n    正常的代码\ncommit da3a95c84b6a92934ee30b6728e258bcda75f276\nAuthor: toyflivver <2440659688@qq.com>\nDate:   Thu Sep 28 13:58:12 2017 +0800\n    qbf\ncommit 267466352079296520320991a75321485224d6c6\nAuthor: toyflivver <2440659688@qq.com>\nDate:   Thu Sep 28 13:40:09 2017 +0800\n    qbf\n")])])]),a("p",[t._v("可以看出现在的状态在 commitid 为 cf0d692e982d8e372a07aaa6901c395eec73e356 的提交上（有 HEAD -> master 标记）。")]),t._v(" "),a("h2",{attrs:{id:"please-enter-a-commit-message-to-explain-why-this-merge-is-necessary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#please-enter-a-commit-message-to-explain-why-this-merge-is-necessary"}},[t._v("#")]),t._v(" Please enter a commit message to explain why this merge is necessary.")]),t._v(" "),a("p",[t._v("请输入提交消息来解释为什么这种合并是必要的")]),t._v(" "),a("p",[t._v("git 在pull或者合并分支的时候有时会遇到这个界面,可以不管(直接下面3,4步)，如果要输入解释的话就需要:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('1. 按键盘字母 i 进入insert模式\n\n2. 修改最上面那行黄色合并信息,可以不修改\n\n3. 按键盘左上角"Esc"\n\n4. 输入":wq",注意是冒号+wq,按回车键即可\n')])])]),a("h2",{attrs:{id:"git-commit-提交规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-提交规范"}},[t._v("#")]),t._v(" git commit 提交规范")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/b49d6a7355343a4cfa291c5ab732a3f35a836ac703ce60f26da5ed8d201b8af6/68747470733a2f2f70312d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f30373334666365393066643734616631393132313130633833396237306561657e74706c762d6b3375316662706663702d77617465726d61726b2e696d6167653f",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/b49d6a7355343a4cfa291c5ab732a3f35a836ac703ce60f26da5ed8d201b8af6/68747470733a2f2f70312d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f30373334666365393066643734616631393132313130633833396237306561657e74706c762d6b3375316662706663702d77617465726d61726b2e696d6167653f",alt:"image.png"}}),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"修改请求源为内网"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改请求源为内网"}},[t._v("#")]),t._v(" 修改请求源为内网")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/fe89c0fdf14f91221d3b751a3a148c48e7137aab1a395f6d515c5a7ef3e0dad6/68747470733a2f2f70312d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f61613333393631336533376634396438623135633839363231336232636262657e74706c762d6b3375316662706663702d77617465726d61726b2e696d6167653f",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/fe89c0fdf14f91221d3b751a3a148c48e7137aab1a395f6d515c5a7ef3e0dad6/68747470733a2f2f70312d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f61613333393631336533376634396438623135633839363231336232636262657e74706c762d6b3375316662706663702d77617465726d61726b2e696d6167653f",alt:"clipboard.png"}}),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"git-打标签发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-打标签发布"}},[t._v("#")]),t._v(" Git 打标签发布")]),t._v(" "),a("p",[t._v("一般项目发布都有版本号，打标签就是为了记录此时版本下的代码，每次项目发布前给当前代码打上对应标签号，以后可以根据标签号找到任一版本的代码。")]),t._v(" "),a("p",[t._v("相关指令：")]),t._v(" "),a("h3",{attrs:{id:"_1-获取远程标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取远程标签"}},[t._v("#")]),t._v(" 1. 获取远程标签")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git fetch --tags // 拉取远程标签\ngit tag // 查看标签\ngit fetch origin tag 2.4.10 // 用于精确的拉取指定的某个版本，适合运维同学部署指定版本\n")])])]),a("h3",{attrs:{id:"_2-新建标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-新建标签"}},[t._v("#")]),t._v(" 2. 新建标签")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git tag 2.4.10 //简单方法1\ngit tag -a 2.4.10 -m 'voc-web version 2.4.10' // 带备注的（常用）\n")])])]),a("h3",{attrs:{id:"_3-推送到远程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-推送到远程"}},[t._v("#")]),t._v(" 3. 推送到远程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin --tags\n")])])]),a("h3",{attrs:{id:"_4-删除标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-删除标签"}},[t._v("#")]),t._v(" 4. 删除标签")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git tag -d 2.4.10 //删除了本地的2.4.10标签\ngit push origin :refs/tags/2.4.10 //删除了远程的2.4.10标签\n")])])]),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h3",{attrs:{id:"npm-常用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-常用操作"}},[t._v("#")]),t._v(" npm 常用操作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rm -rf node_modules 删除 node_modules目录\n\nrm -rf package-lock.json 删除package-lock.json\n\nnpm set registry http://registry.npm.taobao.org 修改 下载仓库为淘宝镜像\n\nnpm config set disturl https://npm.taobao.org/dist\n\nnpm config set chromedriver_cdnurl\nhttp://cdn.npm.taobao.org/dist/chromedriver\n\nnpm set phantomjs_cdnurl http://cdn.npm.taobao.org/dist/phantomjs\n\nnpm cache verify 清除 npm 缓存\n\nnpm install\n")])])]),a("h3",{attrs:{id:"删除-ds-store-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-ds-store-文件"}},[t._v("#")]),t._v(" 删除 .DS_Store 文件")]),t._v(" "),a("p",[t._v(".DS_Store 是 Finder 用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。虽然有办法可以禁止 .DS_Store 文件的生成，但是没有必要，只需要在 Git 中忽略 .DS_Store 文件即可。")]),t._v(" "),a("p",[t._v("如果你的项目中还没有自动生成的 .DS_Store 文件，那么直接将 .DS_Store 加入到 .gitignore 文件就可以了。如果你的项目中已经存在 .DS_Store 文件，那就需要先从项目中将其删除，再将它加入到 .gitignore。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm -r --cached .DS_Store\n\ngit commit -m 'delete .DS_Store' \n")])])]),a("p",[t._v("发现远程库的 .DS_Store 已经没了。")]),t._v(" "),a("p",[t._v("然后在 gitignore 中忽略即可")]),t._v(" "),a("h3",{attrs:{id:"删除-merge-msg-swp-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-merge-msg-swp-文件"}},[t._v("#")]),t._v(" 删除 MERGE_MSG.swp 文件")]),t._v(" "),a("p",[t._v(".swp 文件和 git 无关，在使用 VIM 开始编辑某文件时，都会产生该文件对应的 .swp 文件。正常的退出，VIM 会自动删除此类型文件，非正常退出情况下， VIM 不会删除 ，.swp 文件会作为文件编辑状态的内容备份。")]),t._v(" "),a("p",[t._v("其实多次打开多次不正常关闭，会一直产生 .sw* 文件")]),t._v(" "),a("p",[t._v("第一步：回到合并前状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" git merge --abort  // 中止合并\n rm .git/.MERGE_MSG.sw* //删除 vim 非正常关闭产生的文件\n")])])]),a("p",[t._v("第二步：重新合并\n合并提交信息页面，使用 :wq! 或者 :q! 正常退出 VIM ，就能正常合并啦。")]),t._v(" "),a("h3",{attrs:{id:"oh-my-zsh-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oh-my-zsh-插件"}},[t._v("#")]),t._v(" oh-my-zsh 插件")]),t._v(" "),a("p",[t._v("强烈推荐这个插件, 内置了一套简洁的 git 操作快捷指令，使我们操作 git 更快；基于zsh 终端环境，所以需要 mac 系统和 linux 系统。")]),t._v(" "),a("p",[t._v("其内置对快捷指令如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('g - git\ngst - git status\ngl - git pull\ngup - git pull --rebase\ngp - git push\ngd - git diff\ngdc - git diff --cached\ngdv - git diff -w "$@" | view\ngc - git commit -v\ngc! - git commit -v --amend\ngca - git commit -v -a\ngca! - git commit -v -a --amend\ngcmsg - git commit -m\ngco - git checkout\ngcm - git checkout master\ngr - git remote\ngrv - git remote -v\ngrmv - git remote rename\ngrrm - git remote remove\ngsetr - git remote set-url\ngrup - git remote update\ngrbi - git rebase -i\ngrbc - git rebase --continue\ngrba - git rebase --abort\ngb - git branch\ngba - git branch -a\ngcount - git shortlog -sn\ngcl - git config --list\ngcp - git cherry-pick\nglg - git log --stat --max-count=10\nglgg - git log --graph --max-count=10\nglgga - git log --graph --decorate --all\nglo - git log --oneline --decorate --color\nglog - git log --oneline --decorate --color --graph\ngss - git status -s\nga - git add\ngm - git merge\ngrh - git reset HEAD\ngrhh - git reset HEAD --hard\ngclean - git reset --hard && git clean -dfx\ngwc - git whatchanged -p --abbrev-commit --pretty=medium\ngsts - git stash show --text\ngsta - git stash\ngstp - git stash pop\ngstd - git stash drop\nggpull - git pull origin $(current_branch)\nggpur - git pull --rebase origin $(current_branch)\nggpush - git push origin $(current_branch)\nggpnp - git pull origin $(current_branch) && git push origin $(current_branch)\nglp - _git_log_prettily\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);